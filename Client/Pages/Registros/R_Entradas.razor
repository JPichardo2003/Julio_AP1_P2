@page "/RegistroEntrada";
@page "/RegistroEntrada/{EntradaId:int}";
@inject HttpClient httpClient
@inject NotificationService notificationService;

<EditForm Model="entradas" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />
    <div class="card">
        <div class="card-header">
            <h1>Registro Entradas</h1>
        </div>
        <div class="card-body">
            <div class="row">
                <label>Entrada ID:</label>
                <div class="input-group col-md-6">
                    <InputNumber @bind-Value="entradas.EntradaId" class="id-input"></InputNumber>
                    <button type="button" class="btn btn-dark oi oi-magnifying-glass" @onclick="Buscar"></button>
                </div>
                <div class="col-md-6">
                    <label>Fecha:</label>
                    <InputDate @bind-Value="entradas.Fecha" class="form-control"></InputDate>
                    <ValidationMessage For="@(() => entradas.Fecha)" />
                </div>
                <div class="col-md-6">
                    <label>Concepto:</label>
                    <InputText @bind-Value="entradas.Concepto" class="form-control"></InputText>
                    <ValidationMessage For="@(() => entradas.Concepto)" />
                </div>
            </div>
        </div>
        @*Detalles:*@
        <div class="card card-header">
            <h3>Utilizados</h3>
        </div>
        <div class="card-body border border-1">
            <div class="row">
                <div class="col-md-6">
                    <label>Producto</label>
                    <InputSelect @bind-Value="Detalles.ProductoId" class="form-select">
                        <option value="" hidden="hidden">Seleccione</option>
                        @foreach (var p in ListaProductos)
                        {
                            if(p.Tipo == 0)
                            {
                                <option value="@p.ProductoId">@p.Descripción</option>
                            }    
                        }
                    </InputSelect>
                    <ValidationMessage For="@(() => Detalles.ProductoId)" />
                </div>
                <div class="col-md-6">
                    <label>Cantidad</label>
                    <div class="input-group">
                        <InputNumber @bind-Value="Detalles.CantidadUtilizada" class="form-control"></InputNumber>
                        <button type="button" class="btn btn-success" @onclick="AgregarDetalle"><i class="oi oi-plus" />Add</button>
                        <ValidationMessage For="@(() => Detalles.CantidadUtilizada)" />
                    </div>
                </div>
            </div> 
        </div>
        <table class='table table-responsive table-striped'>
            <thead>
                <tr>
                    <th>Producto Id</th>
                    <th>Descripci&oacute;n</th>
                    <th>Cantidad</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var detalle in entradas.EntradasDetalle)
                {
                   <tr>
                        <td>@detalle.ProductoId</td>
                        <td>@ObtenerDescripción(detalle.ProductoId)</td>
                        <td>@detalle.CantidadUtilizada</td>
                        <td><button type="button" class="btn btn-danger oi oi-trash" @onclick=@(() => RemoverDetalle(detalle))></button></td>
                    </tr>
                }
                <tr>
                    <td>Peso Total: @PesoT g</td>
                </tr>
            </tbody>
        </table>

        <br />
        <fieldset class="card card-header border border-1">
            <legend>Producido</legend>
            <div class="row">
                <div class="col-md-6">
                    <label>Producto</label>
                    <InputSelect @bind-Value="entradas.ProductoId" class="form-select">
                        <option value="0" hidden="hidden">Seleccione</option>
                        @foreach (var p in ListaProductos)
                        {
                            if (p.Tipo == 1)
                            {
                                <option value="@p.ProductoId">@p.Descripción</option>
                            }
                        }
                    </InputSelect>
                </div>
                <div class="col-md-6">
                    <label>Cantidad</label>
                    <InputNumber @bind-Value="entradas.CantidadProducida" class="form-control"></InputNumber>
                </div>
            </div>
        </fieldset>
        <div class="card-footer text-center">
            <button type="button" class="btn btn-primary" @onclick="Nuevo">Nuevo <i class="oi oi-file" /></button>
            <button class="btn btn-success">Guardar <i class="oi oi-document" /></button>
            <button type="button" class="btn btn-danger" @onclick="Eliminar">Eliminar <i class="oi oi-trash" /></button>
        </div>
    </div>
</EditForm>

@code
{
    [Parameter]

    public int EntradaId { get; set; }
    public Entradas entradas { get; set; } = new Entradas();
    public EntradasDetalle Detalles { get; set; } = new EntradasDetalle();
    public List<Productos> ListaProductos { get; set; } = new List<Productos>();
    public List<EntradasDetalle> DetallesRemovidos { get; set; } = new List<EntradasDetalle>();
    public List<EntradasDetalle> ListaDetalles { get; set; } = new List<EntradasDetalle>();

    public float PesoT { get; set; } = 0;
    public int ReducirProducido = 0;
    public bool idVacio;
    public bool cantidadCero;

    protected override async Task OnInitializedAsync()
    {
        var productos = await httpClient.GetFromJsonAsync<List<Productos>>("api/Productos");

        if (productos is not null)
        {
            ListaProductos = productos;
        }
        if (EntradaId > 0)
        {
            this.entradas.EntradaId = EntradaId;
            await Buscar();
        }
    }

    private async Task<Entradas> BuscarEntrada(int entradaId)
    {
        Entradas entradas = new Entradas();
        var entradaEncontrada = await httpClient.GetFromJsonAsync<Entradas>($"api/Entradas/{entradaId}");
        if (entradaEncontrada != null)
            return entradas = entradaEncontrada;
        return new Entradas();
    }

    public string ObtenerDescripción(int Id)
    {
        return ListaProductos.Where(p => p.ProductoId == Id).FirstOrDefault()!.Descripción!;
    }

    public async Task Buscar()
    {
        ListaDetalles = new List<EntradasDetalle>();
        DetallesRemovidos = new List<EntradasDetalle>();
        var entradaIdEncontrada = (await httpClient.GetFromJsonAsync<List<Entradas>>($"api/Entradas"))!
        .ToList()
        .Any(e => e.EntradaId == entradas.EntradaId);
        if (entradaIdEncontrada)
        {
            var entradaEncontrada = await httpClient.GetFromJsonAsync<Entradas>($"api/Entradas/{entradas.EntradaId}");
            if (entradaEncontrada != null)
            {
                this.entradas = entradaEncontrada;
                PesoT = entradas.EntradasDetalle.Sum(e => e.CantidadUtilizada);
                ReducirProducido = entradas.CantidadProducida;
                StateHasChanged();
            }
        }
        else
        {
            var mensaje = new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error",
                    Detail = "No se encontro ninguna entrada",
                    Duration = 4_000
                };
            notificationService.Notify(mensaje);
            return;
        }
    }

    public async Task Guardar()
    {
        entradas.PesoTotal = PesoT;
        if (entradas.ProductoId == 0)
        {
            var mensaje = new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error",
                    Detail = "Debe seleccionar un producto para la producción.",
                    Duration = 4_000
                };
            notificationService.Notify(mensaje);
            return;
        }
        if (entradas.CantidadProducida <= 0)
        {
            var mensaje = new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Cantidad no válida",
                    Detail = "La cantidad producida debe ser mayor que cero.",
                    Duration = 4_000
                };
            notificationService.Notify(mensaje);
            return;
        }
        if (entradas.ProductoId == 5)
        {
            if (entradas.CantidadProducida > 0 && entradas.EntradasDetalle.Any(p => p.ProductoId == 1) && entradas.EntradasDetalle.Any(p => p.ProductoId == 2) && entradas.EntradasDetalle.Any(p => p.ProductoId == 3))
            {
                float gramosTotales = entradas.EntradasDetalle
                                             .Where(p => p.ProductoId == 1)
                                             .Sum(p => p.CantidadUtilizada) + entradas.EntradasDetalle
                                             .Where(p => p.ProductoId == 2).Sum(p => p.CantidadUtilizada)
                                             + entradas.EntradasDetalle.Where(p => p.ProductoId == 3).Sum(p => p.CantidadUtilizada);
                if (gramosTotales / 226.80 < 1)
                {
                    var mensaje = new NotificationMessage
                        {
                            Severity = NotificationSeverity.Error,
                            Summary = "Error",
                            Detail = "El Peso Total debe ser >= 226.80 para poder crear este producto.",
                            Duration = 4_000
                        };
                    notificationService.Notify(mensaje);
                    return;
                }
                else if (entradas.CantidadProducida > gramosTotales / 226.80)
                {
                    var mensaje = new NotificationMessage
                        {
                            Severity = NotificationSeverity.Error,
                            Summary = "Error",
                            Detail = $"Para Producir esa cantidad de {ObtenerDescripción(entradas.ProductoId)} necesita mas Utilizados",
                            Duration = 4_000
                        };
                    notificationService.Notify(mensaje);
                    return;
                }
                else if (entradas.EntradasDetalle.Any(p => p.ProductoId == 4))
                {
                    var mensaje = new NotificationMessage
                        {
                            Severity = NotificationSeverity.Error,
                            Summary = "Error",
                            Detail = $"El Paquete que desea crear {ObtenerDescripción(entradas.ProductoId)} no lleva Ciruelas",
                            Duration = 4_000
                        };
                    notificationService.Notify(mensaje);
                    return;
                }
            }
            else
            {
                var mensaje = new NotificationMessage
                    {
                        Severity = NotificationSeverity.Error,
                        Summary = "Error",
                        Detail = "No tiene los Utilizados Necesarios: (Mani | Pasas | Pistachos)",
                        Duration = 4_000
                    };
                notificationService.Notify(mensaje);
                return;
            }
        }
        else if (entradas.ProductoId == 6)
        {
            if (entradas.CantidadProducida > 0 && entradas.EntradasDetalle.Any(p => p.ProductoId == 1) && (entradas.EntradasDetalle.Any(p => p.ProductoId == 2) || entradas.EntradasDetalle.Any(p => p.ProductoId == 3)) && entradas.EntradasDetalle.Any(p => p.ProductoId == 4))
            {      
                float gramosTotales = entradas.EntradasDetalle
                                             .Where(p => p.ProductoId == 1)
                                             .Sum(p => p.CantidadUtilizada) + entradas.EntradasDetalle
                                             .Where(p => p.ProductoId == 2).Sum(p => p.CantidadUtilizada)
                                             + entradas.EntradasDetalle.Where(p => p.ProductoId == 3).Sum(p => p.CantidadUtilizada)
                                             + entradas.EntradasDetalle.Where(p => p.ProductoId == 4).Sum(p => p.CantidadUtilizada);
                if (gramosTotales / 226.80 < 1)
                {
                    var mensaje = new NotificationMessage
                        {
                            Severity = NotificationSeverity.Error,
                            Summary = "Error",
                            Detail = "El Peso Total debe ser >= 226.80 para poder crear este producto.",
                            Duration = 4_000
                        };
                    notificationService.Notify(mensaje);
                    return;
                }
                else if (entradas.CantidadProducida > (gramosTotales / 226.80))
                {
                    var mensaje = new NotificationMessage
                        {
                            Severity = NotificationSeverity.Error,
                            Summary = "Error",
                            Detail = $"Para Producir esa cantidad de {ObtenerDescripción(entradas.ProductoId)} necesita mas Utilizados",
                            Duration = 4_000
                        };
                    notificationService.Notify(mensaje);
                    return;
                }
            }
            else
            {
                var mensaje = new NotificationMessage
                    {
                        Severity = NotificationSeverity.Error,
                        Summary = "Error",
                        Detail = "No tiene los Utilizados Necesarios: (Mani | Pasas | Pistachos | Ciruelas)",
                        Duration = 4_000
                    };
                notificationService.Notify(mensaje);
                return;
            }
        }
        else if (entradas.ProductoId == 7)
        {
            if (entradas.CantidadProducida > 0 && entradas.EntradasDetalle.Any(p => p.ProductoId == 1) && entradas.EntradasDetalle.Any(p => p.ProductoId == 2) && entradas.EntradasDetalle.Any(p => p.ProductoId == 3))
            {
                float gramosTotales = entradas.EntradasDetalle
                                             .Where(p => p.ProductoId == 1)
                                             .Sum(p => p.CantidadUtilizada) + entradas.EntradasDetalle
                                             .Where(p => p.ProductoId == 2).Sum(p => p.CantidadUtilizada)
                                             + entradas.EntradasDetalle.Where(p => p.ProductoId == 3).Sum(p => p.CantidadUtilizada);
                if (gramosTotales / 90.72 < 1)
                {
                    var mensaje = new NotificationMessage
                        {
                            Severity = NotificationSeverity.Error,
                            Summary = "Error",
                            Detail = "El Peso Total debe ser >= 90.72 para poder crear este producto.",
                            Duration = 4_000
                        };
                    notificationService.Notify(mensaje);
                    return;

                }
                else if (entradas.CantidadProducida > (gramosTotales / 90.72))
                {
                    var mensaje = new NotificationMessage
                        {
                            Severity = NotificationSeverity.Error,
                            Summary = "Error",
                            Detail = $"Para Producir esa cantidad de {ObtenerDescripción(entradas.ProductoId)} necesita mas Utilizados",
                            Duration = 4_000
                        };
                    notificationService.Notify(mensaje);
                    return;
                }
                else if (entradas.EntradasDetalle.Any(p => p.ProductoId == 4))
                {
                    var mensaje = new NotificationMessage
                        {
                            Severity = NotificationSeverity.Error,
                            Summary = "Error",
                            Detail = $"El Paquete que desea crear {ObtenerDescripción(entradas.ProductoId)} no lleva Ciruelas",
                            Duration = 4_000
                        };
                    notificationService.Notify(mensaje);
                    return;
                }
            }
            else
            {
                var mensaje = new NotificationMessage
                    {
                        Severity = NotificationSeverity.Error,
                        Summary = "Error",
                        Detail = "No tiene los Utilizados Necesarios: (Mani | Pasas | Pistachos)",
                        Duration = 4_000
                    };
                notificationService.Notify(mensaje);
                return;
            }
        }
        using var response = await httpClient.PostAsJsonAsync("api/Entradas", entradas);
        if (!response.IsSuccessStatusCode)
        {
            var mensaje = new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error",
                    Detail = "No se pudo Guardar correctamente, verifique los campos",
                    Duration = 4_000
                };
            notificationService.Notify(mensaje);
            return;
        }
        var entradaDevuelta = await response.Content.ReadFromJsonAsync<Entradas>();
        if (entradaDevuelta is not null)
        {
            if (DetallesRemovidos.Count > 0)
            {
                foreach (var detalle in DetallesRemovidos)
                {
                    await httpClient.DeleteAsync($"api/Entradas/DeleteDetalles/{detalle.DetalleId}");
                    var reducir = ListaProductos.FirstOrDefault(p => p.ProductoId == detalle.ProductoId);
                    reducir!.Existencia = reducir.Existencia + detalle.CantidadUtilizada;
                    using var responseDetalleEliminado = await httpClient.PutAsJsonAsync<Productos>($"api/Productos/{reducir.ProductoId}", reducir);
                }      
            }
            if (ListaDetalles.Count > 0)
            {
                foreach (var detalle in ListaDetalles)
                {
                    var reducir = ListaProductos.FirstOrDefault(p => p.ProductoId == detalle.ProductoId);
                    reducir!.Existencia = reducir.Existencia - detalle.CantidadUtilizada;
                    using var responseDetalleAgregado = await httpClient.PutAsJsonAsync<Productos>($"api/Productos/{reducir.ProductoId}", reducir);
                }
            }
            var mensaje = new NotificationMessage
                {
                    Severity = NotificationSeverity.Success,
                    Summary = "Validacion",
                    Detail = "Entrada Guardada Correctamente",
                    Duration = 4_000
                };
            notificationService.Notify(mensaje);
            entradas = entradaDevuelta;
            var producto = ListaProductos.FirstOrDefault(p => p.ProductoId == entradaDevuelta.ProductoId);
            producto!.Existencia += entradaDevuelta.CantidadProducida - ReducirProducido;
            await httpClient.PutAsJsonAsync<Productos>($"api/Productos/{producto.ProductoId}", producto);

            StateHasChanged();
            this.Nuevo();
        }
    }

    public void Nuevo()
    {
        this.entradas = new Entradas();
        this.Detalles = new EntradasDetalle();
        DetallesRemovidos = new List<EntradasDetalle>();
        ListaDetalles = new List<EntradasDetalle>();
        PesoT = 0;
        ReducirProducido = 0;
    }

    public async Task Eliminar()
    {
        var producidoModificado = await httpClient.GetFromJsonAsync<List<Entradas>>($"api/Entradas");
        if(producidoModificado!.FirstOrDefault(p => p.EntradaId == entradas.EntradaId)!.CantidadProducida == entradas.CantidadProducida)
        {
            var detallesEliminados = new List<EntradasDetalle>(entradas.EntradasDetalle);
            using var response = await httpClient.DeleteAsync($"api/Entradas/{entradas.EntradaId}");
            if (!response.IsSuccessStatusCode)
            {
                var mensaje = new NotificationMessage
                    {
                        Severity = NotificationSeverity.Error,
                        Summary = "Error",
                        Detail = "La entrada no fue Eliminada Correctamente",
                        Duration = 4_000
                    };
                notificationService.Notify(mensaje);
                return;
            }
            else
            {
                var mensaje = new NotificationMessage
                    {
                        Severity = NotificationSeverity.Success,
                        Summary = "Validacion",
                        Detail = "Entrada Eliminada Correctamente",
                        Duration = 4_000
                    };
                notificationService.Notify(mensaje);

                foreach (var detalle in detallesEliminados)
                {
                    var productos = ListaProductos.FirstOrDefault(p => p.ProductoId == detalle.ProductoId);
                    if (productos != null)
                    {
                        productos.Existencia += detalle.CantidadUtilizada;
                        await httpClient.PutAsJsonAsync<Productos>($"api/Productos/{productos.ProductoId}", productos);
                    }
                }

                var producto = ListaProductos.FirstOrDefault(p => p.ProductoId == entradas.ProductoId);
                producto!.Existencia -= entradas.CantidadProducida;
                await httpClient.PutAsJsonAsync<Productos>($"api/Productos/{producto.ProductoId}", producto);
            }
        }
        else
        {
            var mensaje = new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error",
                    Detail = "No se puede eliminar porque ha modificado la cantidad producida",
                    Duration = 4_000
                };
            notificationService.Notify(mensaje);
            return;
        }

        Nuevo();
    }

    public bool Validar()
    {
        idVacio = (Detalles.ProductoId <=0);
        cantidadCero = (Detalles.CantidadUtilizada <= 0);
        return idVacio || cantidadCero;
    }

    public async Task AgregarDetalle()
    {
        if (Validar())
        {
            var mensaje = new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error",
                    Detail = "Llene los campos del detalle Correctamente",
                    Duration = 4_000
                };
            notificationService.Notify(mensaje);
            return;
        }
        var producto = await BuscarProductos(Detalles.ProductoId);
        if(producto != null)
        {
            if(Detalles.CantidadUtilizada > producto.Existencia)
            {
                var mensaje = new NotificationMessage
                    {
                        Severity = NotificationSeverity.Error,
                        Summary = "Error",
                        Detail = $"No hay suficiente cantidad de {producto.Descripción} en el inventario ({producto.Existencia})",
                        Duration = 4_000
                    };
                notificationService.Notify(mensaje);
                return;
            }
        }

        if (entradas != null)
        {
            var detalleEncontrado = await httpClient.GetFromJsonAsync<List<EntradasDetalle>>($"api/Entradas");
            var detalleExiste = detalleEncontrado!.Any(d => d.DetalleId == Detalles.DetalleId);
            Detalles.EntradaId = entradas.EntradaId;
            entradas.EntradasDetalle.Add(Detalles);
            if(detalleExiste)
                ListaDetalles.Add(Detalles);
            if (DetallesRemovidos.Any(d => d.DetalleId == Detalles.DetalleId))
                DetallesRemovidos.Remove(Detalles);
            Detalles = new EntradasDetalle();
            PesoT = entradas.EntradasDetalle.Sum(e => e.CantidadUtilizada);

        }
        StateHasChanged();
    }

    public void RemoverDetalle(EntradasDetalle detalle)
    {
        Detalles = detalle;
        entradas.EntradasDetalle.Remove(detalle);
        DetallesRemovidos.Add(detalle);
        if (ListaDetalles.Any(d => d.DetalleId == detalle.DetalleId))
            ListaDetalles.Remove(detalle);
        PesoT = entradas.EntradasDetalle.Sum(e => e.CantidadUtilizada);
        StateHasChanged();
    }

    private async Task<Productos> BuscarProductos(int ProductoId)
    {
        var producto = await httpClient.GetFromJsonAsync<Productos>($"api/Productos/{ProductoId}");

        return producto ?? new Productos();
    }
}